#include <iostream>
#include <fstream>
#include <stack>
using namespace std;
class Stack {
    struct Element {
        int inf;
        Element* next;
        Element(int x, Element* p) : inf(x), next(p) {}
    };
    Element* head;
public:
    Stack() : head(0) {}
    bool empty() {
        return head == 0;
    }
    int pop() {
        if (empty()) { return 0; }
        Element* r = head;
        int i = r->inf;
        head = r->next;
        delete r;
        return i;
    }
    void push(int data) {
        head = new Element(data, head);
    }
    int top() {
        if (empty()) return 0;
        else return head->inf;
    }
    int pairs() {
        Stack Second;
        int count = 0, kpop;
        while (!empty()) {
            kpop = pop();
            if (kpop == top())
                count++;
            Second.push(kpop);
        }
        while (!Second.empty())
            push(Second.pop());
        delete Second.head;
        return count;
    }
    void delpairs() {
        Stack Second;
        while (!empty()) {
            if (pop() != top())
                Second.push(top());
        }
        Second.pop();
        while (!Second.empty())
            push(Second.pop());
        delete Second.head;
    }
};
int main() {
    ifstream fin("input.txt");
    ofstream fout("output.txt");
    Stack St;
    int i;
    while (fin >> i)
        St.push(i);
    fin.close();
    cout << St.pairs() << endl; //количество пар
    St.delpairs(); //удаляем пары
    while (!St.empty())
        fout << St.pop() << ' ';
    fout.close();
}
